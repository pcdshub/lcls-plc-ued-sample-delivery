

DUTs
----


GVLs
----


GVL_RCC
^^^^^^^

::

    VAR_GLOBAL
        (* OverrideMode *)
        {attribute 'pytmc' := 'pv: UED:RCC:VAC:OVRD_MODE'}
        xSystemOverrideMode_RCC	: BOOL := FALSE;


        {attribute 'pytmc' :=' pv: UED:RCC:VRC:01 '}
        {attribute 'TcLinkTo' := 	'.i_xClsLS	:=  TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E2 (EL1004)^Channel 1^Input;
                                    .q_xOPN_DO	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E1 (EL2004)^Channel 1^Output'}
        RCC_VRC_01 : FB_VRC_NC_ClsLS;


        {attribute 'pytmc' :=' pv: UED:RCC:VRC:02 '}
        {attribute 'TcLinkTo' := 	'.i_xClsLS	:=  TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E2 (EL1004)^Channel 2^Input;
                                    .q_xOPN_DO	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E1 (EL2004)^Channel 2^Output'}
        RCC_VRC_02 : FB_VRC_NC_ClsLS;

        // RIX RCC USES
        //{attribute 'pytmc' :=' pv: UED:RCC:VRC:02 '}
        //{attribute 'TcLinkTo' := 	'.i_xOpnLS	:= 	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E2 (EL1004)^Channel 3^Input;
        //                             .i_xClsLS	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E2 (EL1004)^Channel 4^Input;
        //                            .q_xOPN_DO	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E1 (EL2004)^Channel 2^Output'}
        //RCC_VRC_02 : FB_VRC;

        {attribute 'pytmc' :=' pv: UED:RCC:VRC:03 '}
        {attribute 'TcLinkTo' := 	'.i_xClsLS	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E2 (EL1004)^Channel 3^Input;
                                    .q_xOPN_DO	:= 	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E1 (EL2004)^Channel 3^Output'}
        RCC_VRC_03 : FB_VRC_NC_ClsLS;


        {attribute 'pytmc' :=' pv: UED:RCC:VRC:04 '}
        {attribute 'TcLinkTo' := 	'.i_xClsLS	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E2 (EL1004)^Channel 4^Input;
                                    .q_xOPN_DO	:=  TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_E1 (EL2004)^Channel 4^Output'}
        RCC_VRC_04 : FB_VRC_NC_ClsLS;


        {attribute 'pytmc' :=' pv: UED:RCC:GCP:01 '}
        {attribute 'TcLinkTo' := 	'.xPress_OK		:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EK1122)^Hoffman Box Vac EK1 (EK1100)^VLS_RCC (EK1122)^RCC_GPI (901P)^TXPDO Combined^Combination Gauge Reading Valid;
                                     .xOverrange	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EK1122)^Hoffman Box Vac EK1 (EK1100)^VLS_RCC (EK1122)^RCC_GPI (901P)^TXPDO Combined^Combination Gauge Overrange Exceeded;
                                    .xUnderrange 	:= TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EK1122)^Hoffman Box Vac EK1 (EK1100)^VLS_RCC (EK1122)^RCC_GPI (901P)^TXPDO Combined^Combination Gauge Underrange Exceeded;
                                    .i_iPRESS_R 	:= TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EK1122)^Hoffman Box Vac EK1 (EK1100)^VLS_RCC (EK1122)^RCC_GPI (901P)^TXPDO Combined^Combination Gauge Active Value;
                                    .bWcstate 		:= TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^Term 2 (EK1122)^Hoffman Box Vac EK1 (EK1100)^VLS_RCC (EK1122)^RCC_GPI (901P)^WcState^WcState' }
        RCC_GCP_01 : FB_901_ECAT;


        {attribute 'pytmc' :=' pv: UED:RCC:TC:01 '}
        {attribute 'TcLinkTo' := ' .bError 		:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_TC (EL3314)^TC Inputs Channel 1^Status^Error;
                                   .bUnderrange :=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_TC (EL3314)^TC Inputs Channel 1^Status^Underrange;
                                   .bOverrange 	:=	TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_TC (EL3314)^TC Inputs Channel 1^Status^Overrange ;
                                   .iRaw		:= TIID^Device 1 (EtherCAT)^Term 1 (EK1200)^RCC_TC (EL3314)^TC Inputs Channel 1^Value '}
       RCC_STC_01 : FB_TempSensor;
    END_VAR




POUs
----


MAIN
^^^^

::

    PROGRAM MAIN
    VAR
    END_VAR
    PRG_RCC();

    END_PROGRAM


Related:
    * `PRG_RCC`_


PRG_RCC
^^^^^^^

::

    PROGRAM PRG_RCC
    VAR
        RCC_VRC_01_OPEN_OK : BOOL;
        RCC_VRC_02_OPEN_OK : BOOL;
        RCC_VRC_03_OPEN_OK : BOOL;
        RCC_VRC_04_OPEN_OK : BOOL;

       {attribute 'pytmc' :=' pv: UED:GCP:01:INLK_Setpoint '}
        RCC_GCP_01_INTERLOCK_SETPOINT : REAL := 10;

    END_VAR
    RCC_GCP_01(PG=>);
    RCC_STC_01();

    (* Valve can open only when UED-RCC-VRC-02 and 03 are closed*)
    RCC_VRC_01_OPEN_OK := ( RCC_VRC_02.iq_stValve.i_xClsLS AND NOT RCC_VRC_02.iq_stValve.q_xOPN_DO ) AND
                                        ( RCC_VRC_03.iq_stValve.i_xClsLS AND NOT RCC_VRC_03.iq_stValve.q_xOPN_DO ) ;

    RCC_VRC_01(i_xExtILK_OK := RCC_VRC_01_OPEN_OK,
                    i_xOverrideMode := xSystemOverrideMode_RCC,
                     iq_stValve=> );

    (* Valve can open only when UED-RCC-VRC-01 and 04 are closed*)
    RCC_VRC_02_OPEN_OK := ( RCC_VRC_01.iq_stValve.i_xClsLS AND NOT RCC_VRC_01.iq_stValve.q_xOPN_DO ) AND
                                        ( RCC_VRC_04.iq_stValve.i_xClsLS AND NOT RCC_VRC_04.iq_stValve.q_xOPN_DO );

    RCC_VRC_02(i_xExtILK_OK := RCC_VRC_02_OPEN_OK,
                    i_xOverrideMode := xSystemOverrideMode_RCC,
                     iq_stValve=> );

    (* Valve can open only when UED-RCC-GCP-01 reading < setpoint Torr and UED-RCC-VRC-01 and 04 are closed*)
    RCC_VRC_03_OPEN_OK := (RCC_GCP_01.PG.rPRESS < RCC_GCP_01_INTERLOCK_SETPOINT and RCC_GCP_01.PG.xPRESS_OK ) AND
                                     ( RCC_VRC_01.iq_stValve.i_xClsLS AND NOT RCC_VRC_01.iq_stValve.q_xOPN_DO ) AND
                                                  ( RCC_VRC_04.iq_stValve.i_xClsLS AND NOT RCC_VRC_04.iq_stValve.q_xOPN_DO );

    RCC_VRC_03(i_xExtILK_OK := RCC_VRC_03_OPEN_OK,
                    i_xOverrideMode := xSystemOverrideMode_RCC,
                     iq_stValve=> );

    (* Valve can open only when UED-RCC-VRC-02 and 03 are closed*)
    RCC_VRC_04_OPEN_OK := ( RCC_VRC_02.iq_stValve.i_xClsLS AND NOT RCC_VRC_02.iq_stValve.q_xOPN_DO ) AND
                                          ( RCC_VRC_03.iq_stValve.i_xClsLS AND NOT RCC_VRC_03.iq_stValve.q_xOPN_DO ) ;

    RCC_VRC_04(i_xExtILK_OK := RCC_VRC_04_OPEN_OK,
                    i_xOverrideMode := xSystemOverrideMode_RCC,
                     iq_stValve=> );

    END_PROGRAM



